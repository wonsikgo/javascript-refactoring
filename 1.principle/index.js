/* 
    리팩토링 Refactioring

    소프트웨어 기능을 보존하면서 설계, 구조 및 구현을 개선

    목포: 복잡성 감소, 가독성 향상, 유지 보수성을 개선, 확장성을 높임

    금지: 기능 변경/추가, 버그 수정, 성능 개선, 버전업데이트


    왜 하는가?

        - 개발 초기 단계부터 완벽한 코드/시스템 설계가 어렵다.

        - 프로그램의 요구사항은 꾸준히 변경된다.

        - 더럽고 복잡한 코드는 이해하기 어렵다.

        - 예상하지 못한 에러가 발생하기 쉽다.


    어떻게 하는가?

        - 테스트코드를 먼저 만들어야한다. (기존의 기능과 동작을 유지하기 위해서)

        - 리팩토링 기법을 사용하여 점진적으로 적용해 나간다.


    언제 하는가?

        - 프로젝트 시작단계

            - 좋은 디자인 패턴으로 코드를 작성

            - 기능 구현을 위한 코드를 작성

            - 테스트 코드를 작성

            - 비슷한 일을 세 번째 하게 되면 리팩토링 한다 (3의 법칙)

        - 유지보수 단계

            - 버그를 검증할 수 잇는 테스트 코드를 작성 
            
            - 코드를 이해하기 쉽게, 변경하기 쉽게 변경

        - 오래된 프로젝트

            - 수정이 필요한 모듈/코드에 한정적으로 테스트 코드를 추가한다.

            - 떄론, 새로운 코드를 작성하는것이 빠를수 있다.

        

*/
